{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","console","log","className","align","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAIMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,sBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,mBACNC,SAAU,eA8BHE,EAdO,SAACC,GAEnB,IAbeC,EAAKC,EAadC,GAbSF,EAaUD,EAAMC,IAbXC,GAagB,IAAIE,MAAOC,WAZ/CC,QAAQC,IAAIL,GACRA,EAAQ,GAAKA,EAAQ,EACfD,EAAM,EAAI,SAAW,SAGpBA,EAAM,EAAI,SAAW,UAKH,EAGHP,EAAaS,GAAhCP,EAHsB,EAGtBA,KAAMC,EAHgB,EAGhBA,SAEb,OACI,yBAAKW,UAAS,yBAAoBL,IAC9B,uBAAGK,UAAS,4BAAuBX,EAAvB,WACZ,wBAAIY,MAAM,UAAWb,GACrB,uBAAGY,UAAS,6BAAwBX,EAAxB,aChClBa,EAAU,SAACV,GACb,OACI,yBAAKQ,UAAU,oBACP,yBAAKA,UAAU,kBAAkBR,EAAMW,WAKvDD,EAAQE,aAAe,CACnBD,QAAS,WAGED,QCXTG,E,4MACFC,MAAQ,CACJb,IAAK,KACLc,aAAc,I,kEAEE,IAAD,OACfC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GACI,EAAKC,SAAS,CAACpB,IAAKmB,EAASE,OAAOC,cAExC,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAACN,aAAcS,EAAIb,aAE5CL,QAAQC,IAAI,8C,2CAIZD,QAAQC,IAAI,+B,sCAIZ,OAAIkB,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMb,IAChC,uCAAawB,KAAKX,MAAMC,eAG9BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMb,IAChC,kBAAC,EAAD,CAAeA,IAAKwB,KAAKX,MAAMb,MAEnC,kBAAC,EAAD,CAASU,QAAQ,qC,uCA3Bde,IAAMC,WA4CxBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.70b0ddc3.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\n\nconst seasonConfig = {\n    summer: {\n        text: \"Let's hit the beach\",\n        iconName: \"sun\"\n    },\n    winter: {\n        text: \"Burr It is cold!\",\n        iconName: \"snowflake\"\n    }\n}\n\n\nconst getSeason = (lat, month) => {\n    console.log(month);\n    if (month > 2 && month < 9){\n       return lat > 0 ? 'summer' : 'winter';\n    }\n    else {\n        return lat > 0 ? 'winter' : 'summer'\n    }\n\n}\n\nconst SeasonDisplay = (props) => {\n\n    const season = getSeason(props.lat, new Date().getMonth());\n    const {text, iconName } = seasonConfig[season];\n    \n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            <h1 align=\"Center\">{ text }</h1>\n            <i className={`icon-right massive ${iconName} icon`} />\n        </div>\n    );\n}\n\nexport default SeasonDisplay;","\n\nimport React from 'react';\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n                <div className=\"ui text loader\">{props.message}</div>\n        </div> \n    )\n}\n\nSpinner.defaultProps = {\n    message: \"Loading\"\n}\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\nclass App extends React.Component {\n    state = {\n        lat: null,\n        errorMessage: \"\"\n    }\n    componentDidMount(){\n        window.navigator.geolocation.getCurrentPosition(\n            position => {\n                this.setState({lat: position.coords.latitude})\n            },\n            err => this.setState({errorMessage: err.message})\n        )\n        console.log('My component was rendered to the screen.')\n    }\n\n    componentDidUpdate(){\n        console.log('My component was updated.');\n    }\n    //We need to have a render method\n    renderContent(){\n        if (this.state.errorMessage && !this.state.lat){\n            return <div>Error: {this.state.errorMessage}</div>\n        }\n\n        if (!this.state.errorMessage && this.state.lat){\n            return <SeasonDisplay lat={this.state.lat} />\n        }\n        return <Spinner message=\"Please accept location request\" />\n\n    }\n\n    render(){\n        \n       return( \n           //Note - we should try not to have multiple return statements in render function.\n           <div className=\"border-red\">\n            {this.renderContent()}\n            </div>\n       )\n     \n        \n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n)"],"sourceRoot":""}